{{file "haproxy.cfg"}}

{{range services}}{{range $tag, $services := service .Name | byTag}}{{$service := (index $services 0)}}{{if eq $tag "haproxy"}}    # HTTP service: {{$service.Name}}
    acl acl_{{$service.Name}} hdr(host) -i {{$service.Name}}.service
    {{if eq (env "CONSUL_DOMAIN") ""}}acl acl_{{$service.Name}} hdr(host) -i {{$service.Name}}.service.consul{{else}}acl acl_{{$service.Name}} hdr(host) -i {{$service.Name}}.service.{{env "CONSUL_DOMAIN"}}{{end}}
    {{range datacenters}}{{if eq (env "CONSUL_DOMAIN") ""}}acl acl_{{$service.Name}} hdr(host) -i {{$service.Name}}.service.{{.}}.consul{{else}}acl acl_{{$service.Name}} hdr(host) -i {{$service.Name}}.service.{{.}}.{{env "CONSUL_DOMAIN"}}{{end}}
    {{end}}{{if ne (env "HAPROXY_ADD_DOMAIN")  ""}}acl acl_{{$service.Name}} hdr(host) -i {{$service.Name}}{{env "HAPROXY_ADD_DOMAIN"}}{{end}}
    {{range $service.Tags}}{{if . | regexMatch "^haproxy_route=(.+)" }}acl acl_{{$service.Name}} path_beg {{. | regexReplaceAll "haproxy_route=" ""}}/
    {{end}}{{end}}
    use_backend backend_{{$service.Name}} if acl_{{$service.Name}}

{{end}}{{end}}{{end}}

    acl acl_panteras hdr(host) -i localhost
    acl acl_panteras hdr(host)    127.0.0.1
    {{if ne (env "HOSTNAME") ""}}acl acl_panteras hdr(host) -i {{env "HOSTNAME"}}{{end}}
    {{if ne (env "FQDN")     ""}}acl acl_panteras hdr(host) -i {{env "FQDN"    }}{{end}}
    {{if ne (env "HOST_IP")  ""}}acl acl_panteras hdr(host)    {{env "HOST_IP" }}{{end}}
    use_backend backend_panteras if acl_panteras

    backend backend_panteras
        errorfile 503 /etc/haproxy/errors/panteras.http


{{range services}}{{range $tag, $services := service .Name | byTag}}{{$service := (index $services 0)}}{{if eq $tag "haproxy"}}
# HTTP service: {{$service.Name}}
backend backend_{{$service.Name}}{{$key_maxconn := printf "/haproxy/%s/maxconn" $service.Name}}
    balance roundrobin{{range $tag, $services := service $service.Name | byTag}}{{if $tag | regexMatch "^haproxy_httpchk=(.+)" }}
    option  {{$tag | regexReplaceAll "haproxy_httpchk=(.+)" "httpchk $1"}} {{end}}{{end}}
{{range $services}}    server  {{.Node}}_{{.Port}} {{.Address}}:{{.Port}} maxconn {{ key_or_default $key_maxconn "128" }} {{range .Tags}}{{if . | regexMatch "^haproxy_weight=([0-9]+)" }} {{. | regexReplaceAll "haproxy_weight=" "weight "}} {{end}}{{end}} check
{{end}}{{end}}{{end}}{{end}}

{{range services}}{{range $tag, $services := service .Name | byTag}}{{$service := (index $services 0)}}{{if eq $tag "haproxy"}}{{range $service.Tags}}{{if . | regexMatch "^haproxy_tcp=([0-9]+)" }}{{$tcp_port := . | regexReplaceAll "haproxy_tcp=" ""}}
# TCP forwarding service: {{$service.Name}}:{{$tcp_port}}
listen tcp_{{$service.Name}}
    bind    :{{$tcp_port}}
    mode    tcp
    option  tcplog
    balance roundrobin
{{range $services}}    server  {{.Node}}_{{.Port}} {{.Address}}:{{.Port}} check
{{end}}{{end}}{{end}}
{{end}}{{end}}{{end}}
